// Code generated by counterfeiter. DO NOT EDIT.
package rootfspatcherfakes

import (
	"sync"

	"code.cloudfoundry.org/eirini/rootfspatcher"
)

type FakePatcher struct {
	PatchStub        func() error
	patchMutex       sync.RWMutex
	patchArgsForCall []struct{}
	patchReturns     struct {
		result1 error
	}
	patchReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakePatcher) Patch() error {
	fake.patchMutex.Lock()
	ret, specificReturn := fake.patchReturnsOnCall[len(fake.patchArgsForCall)]
	fake.patchArgsForCall = append(fake.patchArgsForCall, struct{}{})
	fake.recordInvocation("Patch", []interface{}{})
	fake.patchMutex.Unlock()
	if fake.PatchStub != nil {
		return fake.PatchStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.patchReturns.result1
}

func (fake *FakePatcher) PatchCallCount() int {
	fake.patchMutex.RLock()
	defer fake.patchMutex.RUnlock()
	return len(fake.patchArgsForCall)
}

func (fake *FakePatcher) PatchReturns(result1 error) {
	fake.PatchStub = nil
	fake.patchReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakePatcher) PatchReturnsOnCall(i int, result1 error) {
	fake.PatchStub = nil
	if fake.patchReturnsOnCall == nil {
		fake.patchReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.patchReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakePatcher) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.patchMutex.RLock()
	defer fake.patchMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakePatcher) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ rootfspatcher.Patcher = new(FakePatcher)
